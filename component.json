{
    "title": "Amazon Machine Learning",
    "description": "Definition of the public APIs exposed by Amazon Machine Learning",
    "docsUrl": "https://docs.aws.amazon.com/machinelearning/",
    "url": "https://api.apis.guru/v2/specs/amazonaws.com/machinelearning/2014-12-12/swagger.json",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://machinelearning.amazonaws.com/",
                    "http://machinelearning.amazonaws.com/",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "auth_hmac": {
                "label": "Authorization (hmac)",
                "viewClass": "TextFieldView",
                "note": "Amazon Signature authorization v4"
            }
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "AddTags": {
            "main": "./lib/actions/AddTags.js",
            "title": "AddTags",
            "description": "Adds one or more tags to an object, up to a limit of 10. Each tag consists of a key and an optional value. If you add a tag using a key that is already associated with the ML object, <code>AddTags</code> updates the tag's value.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/AddTags.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateBatchPrediction": {
            "main": "./lib/actions/CreateBatchPrediction.js",
            "title": "CreateBatchPrediction",
            "description": "Generates predictions for a group of observations. The observations to process\nexist in one or more data files referenced by a DataSource. This operation\ncreates a new BatchPrediction, and uses an MLModel and the data files referenced\nby the DataSource as information sources. \n\nCreateBatchPrediction is an asynchronous operation. In response to \nCreateBatchPrediction, Amazon Machine Learning (Amazon ML) immediately returns\nand sets the BatchPrediction status to PENDING. After the BatchPrediction \ncompletes, Amazon ML sets the status to COMPLETED. \n\nYou can poll for status updates by using the GetBatchPrediction operation and\nchecking the Status parameter of the result. After the COMPLETED status appears,\nthe results are available in the location specified by the OutputUri parameter.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateBatchPrediction.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateDataSourceFromRDS": {
            "main": "./lib/actions/CreateDataSourceFromRDS.js",
            "title": "CreateDataSourceFromRDS",
            "description": "Creates a DataSource object from an Amazon Relational Database Service\n[http://aws.amazon.com/rds/] (Amazon RDS). A DataSource references data that can\nbe used to perform CreateMLModel, CreateEvaluation, or CreateBatchPrediction \noperations.\n\nCreateDataSourceFromRDS is an asynchronous operation. In response to \nCreateDataSourceFromRDS, Amazon Machine Learning (Amazon ML) immediately returns\nand sets the DataSource status to PENDING. After the DataSource is created and\nready for use, Amazon ML sets the Status parameter to COMPLETED. DataSource in\nthe COMPLETED or PENDING state can be used only to perform >CreateMLModel>, \nCreateEvaluation, or CreateBatchPrediction operations. \n\n If Amazon ML cannot accept the input source, it sets the Status parameter to \nFAILED and includes an error message in the Message attribute of the \nGetDataSource operation response.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateDataSourceFromRDS.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateDataSourceFromRedshift": {
            "main": "./lib/actions/CreateDataSourceFromRedshift.js",
            "title": "CreateDataSourceFromRedshift",
            "description": "Creates a DataSource from a database hosted on an Amazon Redshift cluster. A \nDataSource references data that can be used to perform either CreateMLModel, \nCreateEvaluation, or CreateBatchPrediction operations.\n\nCreateDataSourceFromRedshift is an asynchronous operation. In response to \nCreateDataSourceFromRedshift, Amazon Machine Learning (Amazon ML) immediately\nreturns and sets the DataSource status to PENDING. After the DataSource is\ncreated and ready for use, Amazon ML sets the Status parameter to COMPLETED. \nDataSource in COMPLETED or PENDING states can be used to perform only \nCreateMLModel, CreateEvaluation, or CreateBatchPrediction operations. \n\n If Amazon ML can't accept the input source, it sets the Status parameter to \nFAILED and includes an error message in the Message attribute of the \nGetDataSource operation response. \n\nThe observations should be contained in the database hosted on an Amazon\nRedshift cluster and should be specified by a SelectSqlQuery query. Amazon ML\nexecutes an Unload command in Amazon Redshift to transfer the result set of the \nSelectSqlQuery query to S3StagingLocation.\n\nAfter the DataSource has been created, it's ready for use in evaluations and\nbatch predictions. If you plan to use the DataSource to train an MLModel, the \nDataSource also requires a recipe. A recipe describes how each input variable\nwill be used in training an MLModel. Will the variable be included or excluded\nfrom training? Will the variable be manipulated; for example, will it be\ncombined with another variable or will it be split apart into word combinations?\nThe recipe provides answers to these questions.\n\nYou can't change an existing datasource, but you can copy and modify the\nsettings from an existing Amazon Redshift datasource to create a new datasource.\nTo do so, call GetDataSource for an existing datasource and copy the values to a \nCreateDataSource call. Change the settings that you want to change and make sure\nthat all required fields have the appropriate values.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateDataSourceFromRedshift.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateDataSourceFromS3": {
            "main": "./lib/actions/CreateDataSourceFromS3.js",
            "title": "CreateDataSourceFromS3",
            "description": "Creates a DataSource object. A DataSource references data that can be used to\nperform CreateMLModel, CreateEvaluation, or CreateBatchPrediction operations.\n\nCreateDataSourceFromS3 is an asynchronous operation. In response to \nCreateDataSourceFromS3, Amazon Machine Learning (Amazon ML) immediately returns\nand sets the DataSource status to PENDING. After the DataSource has been created\nand is ready for use, Amazon ML sets the Status parameter to COMPLETED. \nDataSource in the COMPLETED or PENDING state can be used to perform only \nCreateMLModel, CreateEvaluation or CreateBatchPrediction operations. \n\n If Amazon ML can't accept the input source, it sets the Status parameter to \nFAILED and includes an error message in the Message attribute of the \nGetDataSource operation response. \n\nThe observation data used in a DataSource should be ready to use; that is, it\nshould have a consistent structure, and missing data values should be kept to a\nminimum. The observation data must reside in one or more .csv files in an Amazon\nSimple Storage Service (Amazon S3) location, along with a schema that describes\nthe data items by name and type. The same schema must be used for all of the\ndata files referenced by the DataSource. \n\nAfter the DataSource has been created, it's ready to use in evaluations and\nbatch predictions. If you plan to use the DataSource to train an MLModel, the \nDataSource also needs a recipe. A recipe describes how each input variable will\nbe used in training an MLModel. Will the variable be included or excluded from\ntraining? Will the variable be manipulated; for example, will it be combined\nwith another variable or will it be split apart into word combinations? The\nrecipe provides answers to these questions.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateDataSourceFromS3.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateEvaluation": {
            "main": "./lib/actions/CreateEvaluation.js",
            "title": "CreateEvaluation",
            "description": "Creates a new Evaluation of an MLModel. An MLModel is evaluated on a set of\nobservations associated to a DataSource. Like a DataSource for an MLModel, the \nDataSource for an Evaluation contains values for the Target Variable. The \nEvaluation compares the predicted result for each observation to the actual\noutcome and provides a summary so that you know how effective the MLModel \nfunctions on the test data. Evaluation generates a relevant performance metric,\nsuch as BinaryAUC, RegressionRMSE or MulticlassAvgFScore based on the\ncorresponding MLModelType: BINARY, REGRESSION or MULTICLASS. \n\nCreateEvaluation is an asynchronous operation. In response to CreateEvaluation,\nAmazon Machine Learning (Amazon ML) immediately returns and sets the evaluation\nstatus to PENDING. After the Evaluation is created and ready for use, Amazon ML\nsets the status to COMPLETED. \n\nYou can use the GetEvaluation operation to check progress of the evaluation\nduring the creation operation.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateEvaluation.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateMLModel": {
            "main": "./lib/actions/CreateMLModel.js",
            "title": "CreateMLModel",
            "description": "Creates a new MLModel using the DataSource and the recipe as information\nsources. \n\nAn MLModel is nearly immutable. Users can update only the MLModelName and the \nScoreThreshold in an MLModel without creating a new MLModel. \n\nCreateMLModel is an asynchronous operation. In response to CreateMLModel, Amazon\nMachine Learning (Amazon ML) immediately returns and sets the MLModel status to \nPENDING. After the MLModel has been created and ready is for use, Amazon ML sets\nthe status to COMPLETED. \n\nYou can use the GetMLModel operation to check the progress of the MLModel during\nthe creation operation.\n\n CreateMLModel requires a DataSource with computed statistics, which can be\ncreated by setting ComputeStatistics to true in CreateDataSourceFromRDS, \nCreateDataSourceFromS3, or CreateDataSourceFromRedshift operations.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateMLModel.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateRealtimeEndpoint": {
            "main": "./lib/actions/CreateRealtimeEndpoint.js",
            "title": "CreateRealtimeEndpoint",
            "description": "Creates a real-time endpoint for the <code>MLModel</code>. The endpoint contains the URI of the <code>MLModel</code>; that is, the location to send real-time prediction requests for the specified <code>MLModel</code>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateRealtimeEndpoint.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteBatchPrediction": {
            "main": "./lib/actions/DeleteBatchPrediction.js",
            "title": "DeleteBatchPrediction",
            "description": "Assigns the DELETED status to a BatchPrediction, rendering it unusable.\n\nAfter using the DeleteBatchPrediction operation, you can use the \nGetBatchPrediction operation to verify that the status of the BatchPrediction \nchanged to DELETED.\n\nCaution: The result of the DeleteBatchPrediction operation is irreversible.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteBatchPrediction.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteDataSource": {
            "main": "./lib/actions/DeleteDataSource.js",
            "title": "DeleteDataSource",
            "description": "Assigns the DELETED status to a DataSource, rendering it unusable.\n\nAfter using the DeleteDataSource operation, you can use the GetDataSource \noperation to verify that the status of the DataSource changed to DELETED.\n\nCaution: The results of the DeleteDataSource operation are irreversible.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteDataSource.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteEvaluation": {
            "main": "./lib/actions/DeleteEvaluation.js",
            "title": "DeleteEvaluation",
            "description": "Assigns the DELETED status to an Evaluation, rendering it unusable.\n\nAfter invoking the DeleteEvaluation operation, you can use the GetEvaluation \noperation to verify that the status of the Evaluation changed to DELETED.\n\nCaution The results of the DeleteEvaluation operation are irreversible.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteEvaluation.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteMLModel": {
            "main": "./lib/actions/DeleteMLModel.js",
            "title": "DeleteMLModel",
            "description": "Assigns the DELETED status to an MLModel, rendering it unusable.\n\nAfter using the DeleteMLModel operation, you can use the GetMLModel operation to\nverify that the status of the MLModel changed to DELETED.\n\nCaution: The result of the DeleteMLModel operation is irreversible.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteMLModel.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteRealtimeEndpoint": {
            "main": "./lib/actions/DeleteRealtimeEndpoint.js",
            "title": "DeleteRealtimeEndpoint",
            "description": "Deletes a real time endpoint of an <code>MLModel</code>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteRealtimeEndpoint.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteTags": {
            "main": "./lib/actions/DeleteTags.js",
            "title": "DeleteTags",
            "description": "Deletes the specified tags associated with an ML object. After this operation is\ncomplete, you can't recover deleted tags.\n\nIf you specify a tag that doesn't exist, Amazon ML ignores it.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteTags.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeBatchPredictions": {
            "main": "./lib/actions/DescribeBatchPredictions.js",
            "title": "DescribeBatchPredictions",
            "description": "Returns a list of <code>BatchPrediction</code> operations that match the search criteria in the request.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeBatchPredictions.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeDataSources": {
            "main": "./lib/actions/DescribeDataSources.js",
            "title": "DescribeDataSources",
            "description": "Returns a list of <code>DataSource</code> that match the search criteria in the request.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeDataSources.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeEvaluations": {
            "main": "./lib/actions/DescribeEvaluations.js",
            "title": "DescribeEvaluations",
            "description": "Returns a list of <code>DescribeEvaluations</code> that match the search criteria in the request.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeEvaluations.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeMLModels": {
            "main": "./lib/actions/DescribeMLModels.js",
            "title": "DescribeMLModels",
            "description": "Returns a list of <code>MLModel</code> that match the search criteria in the request.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeMLModels.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeTags": {
            "main": "./lib/actions/DescribeTags.js",
            "title": "DescribeTags",
            "description": "Describes one or more of the tags for your Amazon ML object.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeTags.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetBatchPrediction": {
            "main": "./lib/actions/GetBatchPrediction.js",
            "title": "GetBatchPrediction",
            "description": "Returns a <code>BatchPrediction</code> that includes detailed metadata, status, and data file information for a <code>Batch Prediction</code> request.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetBatchPrediction.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetDataSource": {
            "main": "./lib/actions/GetDataSource.js",
            "title": "GetDataSource",
            "description": "Returns a DataSource that includes metadata and data file information, as well\nas the current status of the DataSource.\n\nGetDataSource provides results in normal or verbose format. The verbose format\nadds the schema description and the list of files pointed to by the DataSource\nto the normal format.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetDataSource.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetEvaluation": {
            "main": "./lib/actions/GetEvaluation.js",
            "title": "GetEvaluation",
            "description": "Returns an <code>Evaluation</code> that includes metadata as well as the current status of the <code>Evaluation</code>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetEvaluation.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetMLModel": {
            "main": "./lib/actions/GetMLModel.js",
            "title": "GetMLModel",
            "description": "Returns an MLModel that includes detailed metadata, data source information, and\nthe current status of the MLModel.\n\nGetMLModel provides results in normal or verbose format.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetMLModel.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "Predict": {
            "main": "./lib/actions/Predict.js",
            "title": "Predict",
            "description": "Generates a prediction for the observation using the specified ML Model.\n\nNote Not all response parameters will be populated. Whether a response parameter\nis populated depends on the type of model requested.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Predict.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateBatchPrediction": {
            "main": "./lib/actions/UpdateBatchPrediction.js",
            "title": "UpdateBatchPrediction",
            "description": "Updates the BatchPredictionName of a BatchPrediction.\n\nYou can use the GetBatchPrediction operation to view the contents of the updated\ndata element.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateBatchPrediction.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateDataSource": {
            "main": "./lib/actions/UpdateDataSource.js",
            "title": "UpdateDataSource",
            "description": "Updates the DataSourceName of a DataSource.\n\nYou can use the GetDataSource operation to view the contents of the updated data\nelement.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateDataSource.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateEvaluation": {
            "main": "./lib/actions/UpdateEvaluation.js",
            "title": "UpdateEvaluation",
            "description": "Updates the EvaluationName of an Evaluation.\n\nYou can use the GetEvaluation operation to view the contents of the updated data\nelement.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateEvaluation.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateMLModel": {
            "main": "./lib/actions/UpdateMLModel.js",
            "title": "UpdateMLModel",
            "description": "Updates the MLModelName and the ScoreThreshold of an MLModel.\n\nYou can use the GetMLModel operation to view the contents of the updated data\nelement.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateMLModel.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}